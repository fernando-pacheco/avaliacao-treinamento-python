Docker
1 - O que é Docker e quais são suas principais vantagens no desenvolvimento de aplicações web?
    R: Docker é uma ferramenta que tem sua utilidade para criar containers de serviços em nuvem. Sua principal vantagem é permitir que você crie e gerencie seus containers de forma mais eficiente, além de permitir que você execute aplicações em diferentes ambientes sem a necessidade de instalar todas as dependências necessárias.

2 - Explique a diferença entre um Dockerfile e um arquivo docker-compose.yml.
    R: Dockerfile é o arquivo responsável por definir a criação e execução do ambiente. Já o docker-compose é o arquivo responsável por definir o comportamento dos containers.

3 - O que são volumes e networks no contexto do Docker e como eles são utilizados?
    R: Volumes são os conteúdos de cada container. Já as networks são a comunicação entre os containers.

4 - Como você configuraria um serviço de banco de dados PostgreSQL utilizando Docker Compose?
    R: Definiria um serviço que tem como imagem o PostgreSQL, montaria as configurações do container como o nome, o host, a porta, etc., posteriormente, configuraria variáveis de ambiente para conexão com o banco de dados, como o user, password e o banco propriamente dito.

SQLAlchemy e PostgreSQL
1 - O que é SQLAlchemy e como ele facilita o mapeamento objeto-relacional (ORM)?
    R: O SQLAlchemy é uma ferramente de ORM, ou mapper de objetos. Ele auxilia a aplicação em realizar a conexão e em realizar as consultas de maneira mais simples e eficiente com intuito de otimizar o processo de conversação da API com o banco de dados.

2 - Explique o uso de session em SQLAlchemy. Qual é o papel dela no contexto de uma aplicação web?
    R: O uso da session é necessário para que o SQLAlchemy possa manter o estado da sessão do usuário, ou seja, manter os dados que foram alterados pelo usuário, informações como o nome do usuário e senha, etc.

3 - O que são migrations no contexto do SQLAlchemy e por que elas são importantes?
    R: Migrações é um script que é responsável por criar, alterar ou excluir tabelas do banco. Elas servem para manter o estado do banco de dados atualizado e consistente.

4 - Descreva a diferença entre uma relação one-to-many e many-to-many no contexto do SQLAlchemy. Dê exemplos de cada uma.
    R: Uma relação one-to-many é quando uma entidade tem uma relação com outra entidade, mas apenas uma entidade pode ter essa relação. Por exemplo, um post pode ter um único autor, mas um autor pode realizar vários posts.
    Já a relação many-to-many é quando duas entidades podem ter várias relações com outras entidades. Por exemplo, trazendo pra fora do contexto do teste, um usuário pode ter vários endereços e um endereço pode ser atribuído a várias pessoas.

Flask-Admin
1 - O que é Flask-Admin e quais são seus principais usos em uma aplicação Flask?
    R: Flask Admin é uma ferramente para o flask que ajuda na parte administrativa da aplicação.

2 - Como você configuraria uma view administrativa para gerenciar uma entidade User utilizando Flask-Admin?
    R: Para criar uma view administrativa, é necessária a seguinte linha de código admin.add_view(ModelView(UserModel, db_instance.session)).

3 - Quais são os benefícios de utilizar Flask-Admin em uma aplicação web?
    R: O Flask Admin é uma ferramenta poderosa e customizável.

Flask-Login e Autenticação
1 - O que é Flask-Login e como ele auxilia na gestão de autenticação de usuários em uma aplicação Flask?
    R: Flask-Login é a ferramenta que auxilia na autenticação de usuários em uma aplicação Flask, com a sua função LoginManager(), cria-se uma instância de login e ela que é gerenciada e inicializada pelo app.

2 - Explique como implementar uma funcionalidade de login seguro utilizando Flask-Login e criptografia de senhas.
    R: A biblioteca 'werkzeug' é a responsável por realizar essa criptogria de hash da senha para o modelo do usuário para garantir a seguraça

3 - O que são tokens de autenticação e como eles podem ser utilizados para manter sessões seguras?
    R: Tokens de segurança são utilizados para assegurar que o usuário está autenticado e que ele não está tentando acessar uma rota não autorizada.

4 - Explique o conceito de "decorators" em Flask e como eles são usados para proteger rotas.
    R: Decorators são funções que recebem uma função como parâmetro e retornam uma nova função. Eles são usados para proteger rotas, por exemplo, para verificar se o usuário está autenticado antes de acessar uma rota, como o caso do @jwt_required no Flask-JWT-Extended.

Flask-History
1 - O que é Flask-History e quais são seus principais usos em uma aplicação Flask?
    R: Flask History é uma ferramente que permite, principalmente, relizar um rastreamento de alterações em uma entidade do banco de dados

2 - Como você configuraria o Flask-History para rastrear alterações em uma entidade Post?
    R: Para realizar o rastreamento dessas alterações, é necessário utilizar um decorador passando a model como referência: make_versioned(user_cls='PostModel')

3 - Quais são os benefícios de manter um histórico de alterações em uma aplicação web?
    R: Além de facilitar a gestão de alterações, o rastreamento ajuda a identificar possíveis erros e garantir a integridade dos dados.

Redis
O que é Redis e quais são suas principais vantagens em comparação com outros bancos de dados?
Explique como configurar o Redis para armazenamento de sessões em uma aplicação Flask.
Como o uso de Redis pode melhorar a performance de uma aplicação web?
O que são operações atômicas em Redis e como elas garantem a integridade dos dados?

Desenvolvimento Web com Flask
Explique a arquitetura MVC (Model-View-Controller) e como ela é aplicada em uma aplicação Flask.
Quais são as diferenças entre métodos HTTP (GET, POST, PUT, DELETE) e como eles são utilizados em rotas Flask?
Como você configuraria uma aplicação Flask para diferentes ambientes (desenvolvimento, teste, produção)?

Testes com Behave
O que é a biblioteca Behave e qual é sua utilidade em testes de software?
Explique a estrutura básica de um arquivo de feature no Behave.
Quais são os componentes principais de um cenário de teste em Behave (Given, When, Then)?
Como você integraria testes Behave com a sua aplicação Flask para garantir que as funcionalidades estão corretas?